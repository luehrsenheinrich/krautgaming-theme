# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages#test

name: 🏗 Build & Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: ⚙️ Setup PHP with tools
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer:v2

      - name: 💾 Get node.js cache directory
        id: node-cache-dir
        run: echo "::set-output name=dir::$(npm config get cache)" # Use $(yarn cache dir) for yarn

      - name: 💾 Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.node-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Use '**/yarn.lock' for yarn
          restore-keys: ${{ runner.os }}-node-

      - name: 💾 Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: ⚙️ Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: ⚙️ Install Composer Packages
        run: composer install --prefer-dist

      - name: ⚙️ Install Node Packages
        run: npm install

      - name: 🏗 Build Release
        run: npx grunt release

#      - name: 🚢 Deploy to Devserv
#        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && success() }}
#        uses: SamKirkland/FTP-Deploy-Action@4.0.0
#        with:
#          server: ftp.devserv.de
#          username: 336675-brztv
#          password: ${{ secrets.devservFtpPassword }}
#          local-dir: ./trunk/
#          log-level: verbose

#      - name: 🚢 Deploy to Update Server
#        if: ${{ github.event_name == 'release' && success() }}
#        uses: SamKirkland/FTP-Deploy-Action@4.0.0
#        with:
#          server: ftp.luehrsenheinrich.de
#          username: ${{ secrets.UPDATE_SERVER_USER }}
#          password: ${{ secrets.UPDATE_SERVER_PASSWORD }}
#          local-dir: ./update/

      - name: Upload Release Asset
        if: ${{ github.event_name == 'release' && success() }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./update/kgtheme.zip
          asset_name: kgtheme.zip
          asset_content_type: application/zip
